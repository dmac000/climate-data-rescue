<script type="text/javascript">

function clearAnnotationBox() {
    var $box = $('#scribe_annotation_box');
    var $forms = $box.find("form");
    $forms.attr("method", "post");
    $forms.attr("action", ("/annotations"));
    $forms.find(".observation-input").val('');
    $box.hide();
};

function defaultOptions() {
    return [
        { id: "empty", text: "Empty/Blank"},
        { id: "illegible", text: "Illegible"}
    ];
};

function formatSelection(data, container) {
    // console.log(data); 
    var res = "<span>"; 
    var $element = $(data.element); 
 
    var displayAttribute = data.display_attribute; 
    if (typeof(displayAttribute) == "undefined" && !(typeof($element.data("display-attribute")) == "undefined") ) { 
        displayAttribute = $element.data("display-attribute"); 
        // console.info(displayAttribute); 
        // console.info("data undefined"); 
    }; 
    var iconUrl = data.icon_url; 
    if (typeof(iconUrl == "undefined") && !(typeof($element.data("icon-url")) == "undefined") ) { 
        iconUrl = $element.data("icon-url"); 
        // console.info("data undefined"); 
    }; 
    var textSymbol = data.text_symbol; 
    if (typeof(textSymbol) == "undefined" && !(typeof($element.data("text-symbol")) == "undefined") ) { 
        textSymbol = $element.data("text-symbol"); 
        // console.info("data undefined"); 
    }; 
    var name = data.text; 
    if ((typeof(name) == "undefined" || name == "undefined") && !(typeof($element.data("name")) == "undefined") ) { 
        name = $element.data("name"); 
        // console.info("data undefined"); 
    }; 
 
    if (displayAttribute) { 
        if (displayAttribute == "icon") { 
            res += ("<img src='" + iconUrl + "' />"); 
            // console.info("icon"); 
        } else if (displayAttribute == "symbol") { 
            res += textSymbol; 
            // console.info("symbol"); 
        } else { 
            res += name; 
            // console.info("name"); 
        } 
    } else { 
        res += data.text; 
        // console.info("text"); 
    }; 
     
    res += "</span>"; 

    return $(res);
}

function annotationBoxContents(annotationId) {
    $innerWrapper = $('<div class="inner"></div>');
    $contents = $('<div class="annotation-actions"></div>');
    $detailBtn = $('<button type="button" class="btn btn-xs btn-default annotation-detail-btn"><i class="fa fa-info-circle"></i></button>');
    $editBtn = $('<button type="button" class="btn btn-xs btn-default edit-annotation-btn"><i class="fa fa-pencil"></i></button>');
    $deleteBtn = $('<button type="button" class="btn btn-xs btn-default"><i class="fa fa-trash"></i></button>');
    $resizeBtn = $('<button type="button" class="btn btn-xs btn-default"><i class="fa fa-expand" aria-hidden="true"></i></button>');

    $innerWrapper.click(function() {
        editAnnotation(annotationId);
    });

    $msg = $('<div class="annotation-msg">edit</div>');
    $contents.append($editBtn);
    $innerWrapper.append($contents, $msg);
    return $innerWrapper;
};

function updateAnnotation(event, annotation, $form) {
    event.preventDefault();/*supress default submit action of refreshing the page, so we can add more than one annoation to the 
    transcription */
    if (annotation.id == null) {
      setMsg("Can not update annotation because ID is null", false, "danger");
      return;
    }
    
    $form.attr("method", "put");
    $form.attr("action", ("/annotations/" + annotation.id));
    $form.unbind("ajax:success");
    $form.on("ajax:success", function(e, status, data, xhr) {
        // console.log(e);
        // console.log(data);
        // console.log(status);
        // console.log(xhr);

        setMsg("Annotation sucessfully saved!", true, "success");
        
        $form.find(".observation-input").val('');
        $("[data-selectable='true'").val(null).trigger("change");
    
        $form.attr("method", "post");
        $form.attr("action", ("/annotations"));

        $('#scribe_annotation_box').hide();
        $form.find('.submit-btn').unbind("click")
        $form.find('.submit-btn').click(function(event) {
          transcribeData(event, $form);
        });
    });
    
    $form.submit();
    
};

function editAnnotation(annotation_id) {
  $.ajax({
      url : "/annotations/" + annotation_id + "/edit.json",
      format: "json",
      success : function(annotation) {
          // console.log(annotation);
          $form = $("form[data-field-group-id=" + annotation.field_group.id + "]");
          // console.log($form);
          
          $form.find("[data-field-type='date']").val(annotation.date);
          $form.find("[data-field-type='time']").val(annotation.time);
          $form.find("#x-field").val(annotation.x_tl);
          $form.find("#y-field").val(annotation.y_tl);
          $form.find("#width-field").val(annotation.width);
          $form.find("#height-field").val(annotation.height);
          
          // update transcriber width and position
          var fields = annotation.field_group.fields;

            // console.log(fields);
          newWidth = (fields.length + 3) * 110 + 100;

          $("#scribe_annotation_box").width(newWidth);

          leftPos = ($(window).width() - newWidth) / 2;

          $("#scribe_annotation_box").css("left", (leftPos + "px"));
          $("#scribe_annotation_box").css("top", "75px");
          
          var $zoomBox = $("#scribe_zoom_box");
          $zoomBox.css("background-position-y", (-400));

          $zoomBox.css("background-position-x", ((-1 * leftPos) + "px"));
          
          // set field values from response
          _.each(fields, function(field){
            // console.log(field);

            value = field.value;
            $inputField = $form.find(".scribe_input_field[data-field-id=" + field.id +"]");
            $select = $inputField.find("select");
            // console.log($select);

            if (field.has_options && field.selected_options) {
                $select.find("option.user-option, option:selected").remove();
                $select.trigger("change");
                for (var i = 0; i < field.selected_options.length; i++) {
                    var option = field.selected_options[i];
                    var $option = $("<option class='user-option' selected></option>").val(option.id).html(formatSelection(option));

                    // For custom tag template
                    $option.attr("data-display-attribute", option.display_attribute);
                    $option.attr("data-icon-url", option.icon_url);
                    $option.attr("data-text-symbol", option.text_symbol);
                    $option.attr("data-name", option.name);
                    
                    $select.append($option).trigger("change");
                }
                optionIds = [];
                $optionIdsInput = $inputField.find(".selected-option-ids");

                _.each(field.selected_options, function(option) {
                    optionIds.push(option.id);
                });

                $optionIdsInput.val(optionIds);
            } else if ($select.length > 0) {
                $select.find("option.user-option").remove();
                 if (value == "empty" || value == "illegible") {
                    $select.val(value).trigger("change");
                 } else {
                    var $option = $("<option class='user-option' selected></option>").val(value).text(value);
                    // console.log($option);
                    $select.append($option).trigger("change");
                 };
            } else {
                $inputField.val(value).trigger("change"); 
                // console.log(value);
            };
            
             
          });
          
          
          $form.find('.submit-btn').unbind("click");
          $form.find('.submit-btn').click(function(event) {
              updateAnnotation(event, annotation, $form);
          });
          
          $(".scribe_tab").removeClass("active");
          $("#scribe_tab_" + annotation.field_group.id).addClass("active");
          $("#formInstructions").hide();
          $(".annotation-form-field-group").hide();
          $("div#field-group-" + annotation.field_group.id).show();
          $('#scribe_annotation_box').show();
      }
  });
};

function setMsg(message, fade, style) {
  var $msg = $("#transcription-msg");

  $msg.find("span#msg").html(message);

  $msg.removeClass().addClass("fade in");

  switch (style) {
    case "success": $msg.addClass("btn-success");
    break;

    case "info": $msg.addClass("btn-info");
    break;

    case "warning": $msg.addClass("btn-warning");
    break;

    case "danger": $msg.addClass("btn-danger");
    break;

    default: $msg.addClass("btn-info");
  }

  if (!(typeof fade == "undefined") && fade){
    setTimeout(function() {
      $msg.removeClass("in").addClass("out");
    }, 3000);
  }
};

function transcribeData(event, $form) {
    event.preventDefault();/*supress default submit action of refreshing the page, so we can add more than one annoation to the 
    transcription */
    
    $form.unbind("ajax:success");
    $form.on("ajax:success", function(e, data, status, xhr) {
        // console.log(e);
        // console.log(data);
        // console.log(status);
        // console.log(xhr);

        $('#scribe_annotation_box').hide();

        if (data.id == null) {
          setMsg("Annotation could not be saved because the ID returned was null", false, "danger");
          return;
        }
        setMsg("Annotation sucessfully saved! Click and drag a box around the area that you just transcribed", false, "info");
        
        $("#page-container").kinetic("detach");
        
        $form.unbind("ajax:success");
        $form.on("ajax:success", function(e, status, data, xhr) {
            // console.log(e);
            // console.log(data);
            // console.log(status);
            // console.log(xhr);

            setMsg("Annotated region sucessfully saved!", true, "success");

            $("[data-selectable='true'").val(null).trigger("change");
        });
        $form.attr("method", "put");
        $form.attr("action", ("/annotations/" + data.id));

        
        // Using the boxer plugin
        $('#canvas').boxer({
          appendTo: "#canvas",
          container : "#page-container",
          groupColour : data.field_group.colour_class,

          stop: function(event, ui) {    
              
            var offset = ui.box.offset();
              var position = {
                x: offset.left - $(document).scrollLeft() - $("#canvas").offset().left,
                y : offset.top - $(document).scrollTop() - $("#canvas").offset().top
              };
              ui.box.attr('id',('annotation-' + data.id)).attr('data-annotation-id', data.id).attr('data-field-group-id', data.field_group.id)

              ui.box.html(annotationBoxContents(data.id));

              $form.find("#x-field").val(position.x);
              $form.find("#y-field").val(position.y);
              $form.find("#width-field").val(ui.box.width());
              $form.find("#height-field").val(ui.box.height());

              $('#canvas').unbind(".boxer");
              $("#page-container").kinetic("attach");
              $form.submit();
              $form.find(".observation-input").not(".do-not-clear").val('');
          }
        });

    }).on("ajax:error", function(e, xhr, status, error) {
        // console.log(e);
        console.log(error);
        console.log(status);
        // console.log(xhr);
        setMsg("Annotation could not be saved because: " + error + " | " + status, true, "danger");
    });
    
    $form.submit();
  }

$(document).ready(function(){
//Javascript for custom functionality on new transcription page. 
//All javascript written by the author unless otherwise credited. 
//Code credited as "sourced from" have been modified little to none. 
//Code credited as "adapted from" uses ideas and some lines from the credited location while modifying them to work with this project
  $("#page-complete-checkbox").bootstrapSwitch({
        size : "normal",
        onText : "complete",
        offText : "finish",
        labelText : "transcribing",
        onColor : "success",
        offColor : "primary",
        inverse : true,

        onSwitchChange : function(event, state) {
            if (state) {
                $("#finish-transcribing-btn").removeClass("btn-default").addClass("btn-success").val("Submit Finished Transcription");
            } else {
                $("#finish-transcribing-btn").addClass("btn-default").removeClass("btn-success").val("Take a Break");
            };
        }
    });
    $(".date-field").select2({
        placeholder : "Select Date",
        theme : "bootstrap"
    });
    
    _.each($("[data-selectable='true'"), function(field) {
        $field = $(field);
        
        if ($field.data("field-options")) {

            $field.select2({
                forceAbove : true,
                theme : "bootstrap",
                createTag: function(params) {
                    return undefined;
                },
                tokenSeparators: [',', ' '],
                placeholder: 'select',
                current : function(element,callback) {
                    // console.log("select2 initialized for " + $field.data("field-id"));
                    $.ajax({
                        url : "/field_options_for_field/" + $field.data("field-id"),
                        dataType : "json",
                        success : function(data, status) {
                            var opts = []; 
                            // console.info("current");
                            // console.log(data);

                            _.each(data, function(option, key, list) {
                                console.warning(option);
                                opts.push({ 
                                    id : option.id,  
                                    text : option.name,  
                                    title : option.name, 
                                    icon_url: option.icon_url,  
                                    text_symbol: option.text_symbol,  
                                    display_attribute: option.display_attribute 
                                });
                            });
                            opts = opts.concat(defaultOptions());
                            callback(opts);
                        },
                        error : function(response) {
                            console.log("failed to get options for " + $field.data("field-id"));
                        }
                    });
                },

                templateResult : function(obj, container) {
                    // console.info("template result");
                    // console.log(obj);
                    result = "<span>";
                    if (obj.icon_url && obj.icon_url.length > 0){
                        result += ("<img src='" + obj.icon_url + "' />" + "&nbsp;");
                    };
                    if (obj.text_symbol && obj.text_symbol.length > 0){
                        result += (obj.text_symbol + "&nbsp;-&nbsp;");
                    };
                    result += (obj.text + "</span>");

                    return $(result);
                },

                templateSelection : formatSelection,

                ajax : {
                    url : "/field_options_for_field/" + $field.data("field-id"),
                    dataType : "json",
                    data : function(params) {
                        return { search : params.term };
                    },
                    processResults : function(_data, params) {
                        res = [];
                        // console.info("ajax");
                        // console.log(_data);
                        _.each(_data, function(option) {
                            opt = $.extend({}, { 
                                    id : option.id,  
                                    text : option.name,  
                                    title : option.name, 
                                    icon_url: option.icon_url,  
                                    text_symbol: option.text_symbol,  
                                    display_attribute: option.display_attribute 
                                });

                            res.push(opt);
                        });
                        res = res.concat(defaultOptions());
                        var data = {
                            results: res
                        };
                        return data;
                    },
                        error : function(response) {
                            console.log("failed to get search options for " + $field.data("field-id"));
                        }
                }
            }).on("select2:select", function() {
                optionIds = [];
                $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                $(this).find("option:selected").each(function() {
                    optionIds.push($(this).val());
                });

                $optionIdsInput.val(optionIds);

            }).on("select2:unselect", function(e) {
                console.log(e);
                optionIds = [];
                $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                $(this).find("option:selected").each(function() {
                    optionIds.push($(this).val());
                });

                $optionIdsInput.val(optionIds);

            });

        } else {
            $field.select2({
                theme : "bootstrap",
                multiple: false,
                tags: true,
                tokenSeparators: [',', ' '],
                placeholder: 'type',
                data : defaultOptions(),
                createSearchChoice:function(term, data) {
                  if ( $(data).filter( function() {
                    return this.text.toLowerCase() === term.toLowerCase(); //even if the this.text is undefined it works
                  }).length===0) {
                    return {id:term, text:term};
                  };
                },
                selectOnClose : true
            });
        };
    });

  
  $("#target-image").ready( function() {
    var $canvas = $("#canvas");
    $canvas.width($("#target-image").width());
    // $canvas.height($("#target-image").height());
    // console.log("annotation boxes");
    if (<%= @transcription.annotations.any? ? true : false %>) {
      <% @transcription.annotations.each do |annotation| %>
        <% if annotation.x_tl.present? && annotation.y_tl.present? && annotation.width.present? && annotation.height.present? %>
          var box = $("<div><div>").css({
            "left": <%= annotation.x_tl %>,
            "top": <%= annotation.y_tl %>,
            "width": <%= annotation.width %>,
            "height": <%= annotation.height %>
          }).attr("id", "<%= 'annotation' + annotation.id.to_s %>").attr('data-annotation-id', <%= annotation.id %>).attr('data-field-group-id', <%= annotation.field_group.id %>).addClass("annotation-marker").addClass("<%= annotation.field_group.colour_class %>");
          box.html(annotationBoxContents(<%= annotation.id %>));

          $canvas.append(box);

          // console.log("<%= annotation.date_time_id %>");
        <% end %>
      <% end %>
    } else {
      console.log("no annotation or fail");  
    };

    $("#page-container").kinetic();
  });
  

  $("#transcription-msg button.close").click(function() {
    $("#transcription-msg").removeClass("in");
    $("#transcription-msg").addClass("out");
  });

  $('form.annotation-form').each(function() {
      var $form = $(this);
      $form.find(".submit-btn").click(function(event) {
        transcribeData(event, $form);
      });
  });

//function to toggle between field group form layers when you click on their respective tab. Marks current tab as active
  $(".scribe_tab").click(function(){ /* perform function when user click on an element with the "scribe_tab" class. Corresponds 
  to Field Group tabs in the transcription box */
     $tab = $(this);
     $(".annotation-form-field-group").hide(); //hide all other instances of the field_group data forms when switching tabs
     $('#formInstructions').hide();
     $tab.addClass("active"); //mark clicked tab as active by settings its class

     $tab.siblings().removeClass('active'); //set all siblings of the clicked tab as unselected
     
     var $currentForm = $("#field-group-" + $tab.data('field-group-id'));
     

     $currentForm.show();

     newWidth = $tab.data("field-count") * 110 + 100;

     $("#scribe_annotation_box").width(newWidth);

     //console.log('success'); 
  });
//end field toggler

//open transcription box at page image mouse click position
  $("#new-annotation").click(function(e){
     var $transcriber = $("#scribe_annotation_box");
     // Clear values and reset form desitantation
     $(".observation-input").val(null);
     $("[data-selectable='true'").val(null).trigger("change");
     $forms = $("form.annotation-form");
     _.each($forms, function(form){
        $(form).attr("method", "post");
        $(form).attr("action", "/annotations");
     });
     

     if ($transcriber.is(":hidden")) {
        // show transcriber
       $transcriber.show(250); /*open the box with a delay of half a second. This is what makes the transcription 
       box open with a flourish. Remove the value from the .show() function to make it open instantly */
       $transcriber.offset({left: 25, top: 75}); //set position of the box to open at the click event 'e' position

       var position = {
          x: $transcriber.offset().left - $(document).scrollLeft() - $("#canvas").offset().left,
          y : $transcriber.offset().top - $(document).scrollTop() - $("#canvas").offset().top
       };

       $("#scribe_zoom_box").css("background-position-x", (-1 * position.x));
       $("#scribe_zoom_box").css("background-position-y", (-400));
    }
  });
//end transcription box toggle
});
/*function to enable the image zoom box. Adapted from http://thecodeplayer.com/walkthrough/magnifying-glass-for-images-using-jquery-and-css3 and http://jsfiddle.net/aasFx/ */
  $(document).ready(function(){
      var native_width = 0;
      var native_height = 0;

      var image_object = new Image();
      image_object.src = $("#target-image").attr("src");

      //This code is wrapped in the .load function which is important.
      //width and height of the object would return 0 if accessed before 
      //the image gets loaded.
      native_width = image_object.width;
      native_height = image_object.height;

      // console.log(image_object);

      $("#scribe_annotation_box").draggable({
          containment: "#magnify",
          scroll: false,
          drag: function(){
            var $this = $(this);
            var $box = $("#scribe_zoom_box");
            var bgpY = $box.css("background-position-y");
            var dX = -1 * ($this.offset().left - $(document).scrollLeft() - $("#canvas").offset().left);
            var bgp = dX + "px " + bgpY;
            // //If you move the box over the image now, you should see the zoom box in action
            $box.css("background-position", bgp);
          }
      });
      
      $("#scribe_zoom_box").mousedown(function(e) {
          $("#scribe_annotation_box").draggable("disable");
          var $box = $(this);
          var clickY = e.pageY;
          var bgp = $box.css("background-position-y");
          var bY = parseInt(bgp.slice(0,bgp.length - 2));
          $(window).mousemove(function(e) {
             var y = e.pageY;
             var dY = clickY - y;
             var bgpNew = bY - dY;
             $box.css("background-position-y", bgpNew);
          });
      }).mouseup(function() {
          $(window).unbind("mousemove");
          $("#scribe_annotation_box").draggable("enable");
      });
      
  });
//end image zoom box


</script>