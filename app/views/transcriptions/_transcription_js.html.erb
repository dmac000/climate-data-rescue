<script type="text/javascript">

function updateAnnotation(event, annotation, $form) {
    event.preventDefault();/*supress default submit action of refreshing the page, so we can add more than one annoation to the
    transcription */
    if (annotation.id == null) {
      TranscriberApp.AppManager.setMsg("Can not update annotation because ID is null", false, "danger");
      return;
    }

    $form.attr("method", "put");
    $form.attr("action", ("/annotations/" + annotation.id));
    $form.unbind("ajax:success");
    $form.on("ajax:success", function(e, status, data, xhr) {
        // console.log(e);
        // console.log(data);
        // console.log(status);
        // console.log(xhr);

        TranscriberApp.AppManager.setMsg("Annotation sucessfully saved!", true, "success");

        $form.find(".observation-input").val('');
        $("[data-selectable='true'").val(null).trigger("change");

        $form.attr("method", "post");
        $form.attr("action", ("/annotations"));

        $('#scribe_annotation_box').hide();
        $form.find('.submit-btn').unbind("click")
        $form.find('.submit-btn').click(function(event) {
          transcribeData(event, $form);
        });
    });

    $form.submit();

};

function transcribeData(event, $form) {
    event.preventDefault();/*supress default submit action of refreshing the page, so we can add more than one annoation to the
    transcription */

    $form.unbind("ajax:success");
    $form.on("ajax:success", function(e, data, status, xhr) {
        // console.log(e);
        // console.log(data);
        // console.log(status);
        // console.log(xhr);

        $('#scribe_annotation_box').hide();

        if (data.id == null) {
          TranscriberApp.AppManager.setMsg("Annotation could not be saved because the ID returned was null", false, "danger");
          return;
        }
        TranscriberApp.AppManager.setMsg("Annotation sucessfully saved! Click and drag a box around the area that you just transcribed", false, "info");

        $("#page-container").kinetic("detach");

        $form.unbind("ajax:success");
        $form.on("ajax:success", function(e, status, data, xhr) {
            // console.log(e);
            // console.log(data);
            // console.log(status);
            // console.log(xhr);

            TranscriberApp.AppManager.setMsg("Annotated region sucessfully saved!", true, "success");

            $("[data-selectable='true'").val(null).trigger("change");
        });
        $form.attr("method", "put");
        $form.attr("action", ("/annotations/" + data.id));


        // Using the boxer plugin
        $('#canvas').boxer({
          appendTo: "#canvas",
          container : "#page-container",
          groupColour : data.field_group.colour_class,

          stop: function(event, ui) {

            var offset = ui.box.offset();
              var position = {
                x: offset.left - $(document).scrollLeft() - $("#canvas").offset().left,
                y : offset.top - $(document).scrollTop() - $("#canvas").offset().top
              };
              ui.box.attr('id',('annotation-' + data.id)).attr('data-annotation-id', data.id).attr('data-field-group-id', data.field_group.id)

              ui.box.html(annotationBoxContents(data.id));

              $form.find("#x-field").val(position.x);
              $form.find("#y-field").val(position.y);
              $form.find("#width-field").val(ui.box.width());
              $form.find("#height-field").val(ui.box.height());

              $('#canvas').unbind(".boxer");
              $("#page-container").kinetic("attach");
              $form.submit();
              $form.find(".observation-input").not(".do-not-clear").val('');
          }
        });

    }).on("ajax:error", function(e, xhr, status, error) {
        // console.log(e);
        console.log(error);
        console.log(status);
        // console.log(xhr);
        TranscriberApp.AppManager.setMsg("Annotation could not be saved because: " + error + " | " + status, true, "danger");
    });

    $form.submit();
  }

$(document).ready(function(){
//Javascript for custom functionality on new transcription page.
//All javascript written by the author unless otherwise credited.
//Code credited as "sourced from" have been modified little to none.
//Code credited as "adapted from" uses ideas and some lines from the credited location while modifying them to work with this project


    _.each($("[data-selectable='true'"), function(field) {
        $field = $(field);

        if ($field.data("field-options")) {

            $field.select2({
                forceAbove : true,
                theme : "bootstrap",
                createTag: function(params) {
                    return undefined;
                },
                tokenSeparators: [',', ' '],
                placeholder: 'select',
                current : function(element,callback) {
                    // console.log("select2 initialized for " + $field.data("field-id"));
                    $.ajax({
                        url : "/field_options_for_field/" + $field.data("field-id"),
                        dataType : "json",
                        success : function(data, status) {
                            var opts = [];
                            // console.info("current");
                            // console.log(data);

                            _.each(data, function(option, key, list) {
                                console.warning(option);
                                opts.push({
                                    id : option.id,
                                    text : option.name,
                                    title : option.name,
                                    icon_url: option.icon_url,
                                    text_symbol: option.text_symbol,
                                    display_attribute: option.display_attribute
                                });
                            });
                            opts = opts.concat(defaultOptions());
                            callback(opts);
                        },
                        error : function(response) {
                            console.log("failed to get options for " + $field.data("field-id"));
                        }
                    });
                },

                templateResult : function(obj, container) {
                    // console.info("template result");
                    // console.log(obj);
                    result = "<span>";
                    if (obj.icon_url && obj.icon_url.length > 0){
                        result += ("<img src='" + obj.icon_url + "' />" + "&nbsp;");
                    };
                    if (obj.text_symbol && obj.text_symbol.length > 0){
                        result += (obj.text_symbol + "&nbsp;-&nbsp;");
                    };
                    result += (obj.text + "</span>");

                    return $(result);
                },

                templateSelection : formatSelection,

                ajax : {
                    url : "/field_options_for_field/" + $field.data("field-id"),
                    dataType : "json",
                    data : function(params) {
                        return { search : params.term };
                    },
                    processResults : function(_data, params) {
                        res = [];
                        // console.info("ajax");
                        // console.log(_data);
                        _.each(_data, function(option) {
                            opt = $.extend({}, {
                                    id : option.id,
                                    text : option.name,
                                    title : option.name,
                                    icon_url: option.icon_url,
                                    text_symbol: option.text_symbol,
                                    display_attribute: option.display_attribute
                                });

                            res.push(opt);
                        });
                        res = res.concat(defaultOptions());
                        var data = {
                            results: res
                        };
                        return data;
                    },
                        error : function(response) {
                            console.log("failed to get search options for " + $field.data("field-id"));
                        }
                }
            }).on("select2:select", function() {
                optionIds = [];
                $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                $(this).find("option:selected").each(function() {
                    optionIds.push($(this).val());
                });

                $optionIdsInput.val(optionIds);

            }).on("select2:unselect", function(e) {
                console.log(e);
                optionIds = [];
                $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                $(this).find("option:selected").each(function() {
                    optionIds.push($(this).val());
                });

                $optionIdsInput.val(optionIds);

            });

        } else {
            $field.select2({
                theme : "bootstrap",
                multiple: false,
                tags: true,
                tokenSeparators: [',', ' '],
                placeholder: 'type',
                data : defaultOptions(),
                createSearchChoice:function(term, data) {
                  if ( $(data).filter( function() {
                    return this.text.toLowerCase() === term.toLowerCase(); //even if the this.text is undefined it works
                  }).length===0) {
                    return {id:term, text:term};
                  };
                },
                selectOnClose : true
            });
        };
    });


  $("#target-image").ready( function() {
    var $canvas = $("#canvas");
    $canvas.width($("#target-image").width());
    // $canvas.height($("#target-image").height());
    // console.log("annotation boxes");
    if (<%= @transcription.annotations.any? ? true : false %>) {
      <% @transcription.annotations.each do |annotation| %>
        <% if annotation.x_tl.present? && annotation.y_tl.present? && annotation.width.present? && annotation.height.present? %>
          var box = $("<div><div>").css({
            "left": <%= annotation.x_tl %>,
            "top": <%= annotation.y_tl %>,
            "width": <%= annotation.width %>,
            "height": <%= annotation.height %>
          }).attr("id", "<%= 'annotation' + annotation.id.to_s %>").attr('data-annotation-id', <%= annotation.id %>).attr('data-field-group-id', <%= annotation.field_group.id %>).addClass("annotation-marker").addClass("<%= annotation.field_group.colour_class %>");
          box.html(annotationBoxContents(<%= annotation.id %>));

          $canvas.append(box);

          // console.log("<%= annotation.date_time_id %>");
        <% end %>
      <% end %>
    } else {
      console.log("no annotation or fail");
    };

    $("#page-container").kinetic();
  });



  $('form.annotation-form').each(function() {
      var $form = $(this);
      $form.find(".submit-btn").click(function(event) {
        transcribeData(event, $form);
      });
  });
});



</script>
