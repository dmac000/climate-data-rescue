
<script type="text/javascript" id="transcriber-app">

    TranscriberApp = new Marionette.Application();

    TranscriberApp.addRegions({
        main : "#app-container"
    });

    TranscriberApp.AppManager = (function(Backbone, Marionette) {

        var EventAggregator = new Backbone.Wreqr.EventAggregator();

        MainLayout = Marionette.LayoutView.extend({
            template : "#main-layout-template",
            regions : {
                toolbar : "#transcriber-toolbar",
                msgs : "#transcription-msg-container",
                headerImg : "#header-image-container",
                timeImg : "#time-image-container",
                pageContainer : "#page-container"
            },
            attributes : {
                id : "transcriber-container"
            },
            setMsg : function (message, fade, style) {
                console.log(this);

                msgRegion = this.msgs;

                msgRegion.el = "#transcription-msg-container"; 

                var MsgView = Marionette.ItemView.extend({
                    template : "#msg-template",
                    attributes : {
                      id : "transcription-msg"
                    },
                    events : {
                      "click button" : function() {
                        msgRegion.$el.removeClass("active");
                        msgRegion.reset();
                      }
                    },
                    onRender : function(){
                      var self = this;
                      self.$el.addClass("fade in");

                      msgRegion.$el.addClass("active");

                      switch (self.model.get("style")) {
                        case "success": self.$el.addClass("btn-success");
                        break;

                        case "info": self.$el.addClass("btn-info");
                        break;

                        case "warning": self.$el.addClass("btn-warning");
                        break;

                        case "danger": self.$el.addClass("btn-danger");
                        break;

                        default: self.$el.addClass("btn-info");
                      }

                      if (!(typeof self.model.get("fade") == "undefined") && self.model.get("fade")){
                        setTimeout(function() {
                          self.$el.removeClass("in").addClass("out");

                          setTimeout(function() {
                            msgRegion.$el.removeClass("active");
                            msgRegion.reset();
                          }, 500);
                        }, 3000);
                      }
                    }
                });

                var Message = new Backbone.Model();

                Message.set("text", message);
                Message.set("fade", fade);
                Message.set("style", style);

                view = new MsgView({
                    model : Message
                })


                msgRegion.show(view);
            }
        });

        ToolbarLayout = Marionette.ItemView.extend({
            template : "#transcription-toolbar-template",
            attributes : {
                id : "transcriber-toolbar-wrapper"
            },

            onRender : function() {
                this.$el.find("#page-complete-checkbox").bootstrapSwitch({
                      size : "normal",
                      onText : "complete",
                      offText : "finish",
                      labelText : "transcribing",
                      onColor : "success",
                      offColor : "primary",
                      inverse : true,

                      onSwitchChange : function(event, state) {
                          if (state) {
                              $("#finish-transcribing-btn").removeClass("btn-default").addClass("btn-success").val("Submit Finished Transcription");
                          } else {
                              $("#finish-transcribing-btn").addClass("btn-default").removeClass("btn-success").val("Take a Break");
                          };
                      }
                });
            }
        });

        PageCanvas = Marionette.ItemView.extend({
            template : "#page-canvas-template",
            attributes : {
                id: "canvas"
            }
        });

        PageImage = Marionette.ItemView.extend({
            template : "#page-image-template",

            initialize : function(options) {
                options = options || {};
                defaults = {
                    cursor : "move",
                    x : true,
                    y : true,
                    stopFn : null,
                    scroll : true
                };
                this.options = $.extend(true, {}, this.options, defaults, options);

            },

            onRender : function(options) {
                if (this.options.attributes && this.options.attributes.id) {
                    this.$el.attr("id", this.options.attributes.id);
                };

                var self = this;
                this.$el.kinetic({
                    x : this.options.x,
                    y : this.options.y,
                    cursor : this.options.cursor,
                    "can scroll" : this.options.scroll,
                    stopped : function() {
                        // console.log(options);
                        if (options.options.stopFn) {
                            options.options.stopFn.call(this);
                        }
                    },
                    moved : function() {
                        // console.log(options);
                        if (options.options.moveFn) {
                            options.options.moveFn.call(this);
                        }
                    }
                });
                

                if (this.model.get("resizeContainer")) {
                    // console.info("resize");
                    containerHeight = $("#transcriber-container").height();
                    toolbarHeight = $("#transcriber-toolbar").height();
                    headerImgHeight = $("#header-image-container").height();

                    this.$el.height(containerHeight - (toolbarHeight + headerImgHeight));
                }
            }
        });

        Page = Backbone.Model.extend({
            url : "/page_for_transcription/<%= transcription.id if transcription.present? %>",
            defaults : {
                image_id : "",
                resizeContainer : false
            }

        });

        Annotation = Backbone.Model.extend({

        });

        AnnotationCollection = Backbone.Collection.extend({

        });

        AnnotationBoxView = Marionette.ItemView.extend({
            className : "annotation-marker",

            onRender : function() {
                if (this.model) {

                }
            }
        });

        AnnotationCollectionView = Marionette.CollectionView.extend({
            itemView : AnnotationBoxView
        });


        mainLayout = new MainLayout();

        mainPage = new Page().set("image_id", "target-image").set("resizeContainer", true);
        headerPage = new Page();
        timePage = new Page().set("image_id", "time-image").set("resizeContainer", true);
        pageCanvas = new PageImage({
            model : mainPage,
            template : "#page-canvas-template",
            attributes : {
                id : "canvas"
            },
            moveFn : function() {
                timeImg.$el.kinetic("scrollTop", this.settings.scrollTop);
                headerImg.$el.kinetic("scrollLeft", (this.settings.scrollLeft - timeImg.$el.width()));
            },
            stopFn : function() {
                timeImg.$el.kinetic("scrollTop", this.settings.scrollTop);
                headerImg.$el.kinetic("scrollLeft", (this.settings.scrollLeft - timeImg.$el.width()));
            }
        });
        headerImg = new PageImage({
            model : headerPage,
            cursor : "ns-resize",
            x : false,
            attributes : {
                id : "header-image-kinetic"
            }
        });
        timeImg = new PageImage({
            model : timePage,
            cursor : "ew-resize",
            y : false,
            attributes : {
                id : "time-image-kinetic"
            }
        });

        return {
            init : function() {
                toolbarLayout = new ToolbarLayout();
               

                TranscriberApp.main.show(mainLayout);

                mainLayout.toolbar.show(toolbarLayout);
                mainLayout.headerImg.show(headerImg);
                mainLayout.timeImg.show(timeImg);
                mainLayout.pageContainer.show(pageCanvas);

                headerImg.$el.kinetic("scrollTop", 390);
                timeImg.$el.kinetic("scrollLeft", 315);

                pageCanvas.$el.on("scroll", function() {
                    timeImg.$el.kinetic("scrollTop", $(this).scrollTop());
                    headerImg.$el.kinetic("scrollLeft", $(this).scrollLeft());
                });
            },
            MainLayout : mainLayout
        };
    })(Backbone, Marionette)

    $(document).ready(function() {
        TranscriberApp.addInitializer(TranscriberApp.AppManager.init);
        TranscriberApp.start();
    });

</script>
