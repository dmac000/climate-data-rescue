
<script type="text/javascript" id="transcriber-app">
    function annotationBoxContents(annotationId) {
        $innerWrapper = $('<div class="inner"></div>');
        $contents = $('<div class="annotation-actions"></div>');
        $detailBtn = $('<button type="button" class="btn btn-xs btn-default annotation-detail-btn"><i class="fa fa-info-circle"></i></button>');
        $editBtn = $('<button type="button" class="btn btn-xs btn-default edit-annotation-btn"><i class="fa fa-pencil"></i></button>');
        $deleteBtn = $('<button type="button" class="btn btn-xs btn-default"><i class="fa fa-trash"></i></button>');
        $resizeBtn = $('<button type="button" class="btn btn-xs btn-default"><i class="fa fa-expand" aria-hidden="true"></i></button>');

        $innerWrapper.click(function() {
            editAnnotation(annotationId);
        });

        $msg = $('<div class="annotation-msg">edit</div>');
        $contents.append($editBtn);
        $innerWrapper.append($contents, $msg);
        return $innerWrapper;
    };


    TranscriberApp = new Marionette.Application();

    TranscriberApp.addRegions({
        main : "#app-container"
    });

    TranscriberApp.AppManager = (function(Backbone, Marionette) {

        var EventAggregator = new Backbone.Wreqr.EventAggregator();

        MainLayout = Marionette.LayoutView.extend({
            template : "#main-layout-template",
            regions : {
                toolbar : "#transcriber-toolbar",
                msgs : "#transcription-msg-container",
                headerImg : "#header-image-container",
                timeImg : "#time-image-container",
                pageContainer : "#page-container"
            },
            attributes : {
                id : "transcriber-container"
            },
            setMsg : function (message, fade, style) {
                console.log(this);

                msgRegion = this.msgs;

                msgRegion.el = "#transcription-msg-container"; 

                var MsgView = Marionette.ItemView.extend({
                    template : "#msg-template",
                    attributes : {
                      id : "transcription-msg"
                    },
                    events : {
                      "click button" : function() {
                        msgRegion.$el.removeClass("active");
                        msgRegion.reset();
                      }
                    },
                    onRender : function(){
                      var self = this;
                      self.$el.addClass("fade in");

                      msgRegion.$el.addClass("active");

                      switch (self.model.get("style")) {
                        case "success": self.$el.addClass("btn-success");
                        break;

                        case "info": self.$el.addClass("btn-info");
                        break;

                        case "warning": self.$el.addClass("btn-warning");
                        break;

                        case "danger": self.$el.addClass("btn-danger");
                        break;

                        default: self.$el.addClass("btn-info");
                      }

                      if (!(typeof self.model.get("fade") == "undefined") && self.model.get("fade")){
                        setTimeout(function() {
                          self.$el.removeClass("in").addClass("out");

                          setTimeout(function() {
                            msgRegion.$el.removeClass("active");
                            msgRegion.reset();
                          }, 500);
                        }, 3000);
                      }
                    }
                });

                var Message = new Backbone.Model();

                Message.set("text", message);
                Message.set("fade", fade);
                Message.set("style", style);

                view = new MsgView({
                    model : Message
                })


                msgRegion.show(view);
            }
        });

        ToolbarLayout = Marionette.ItemView.extend({
            template : "#transcription-toolbar-template",
            attributes : {
                id : "transcriber-toolbar-wrapper"
            },

            events : {
                "click #new-annotation" : function() {
                    transcriptionBox = new TranscriptionBox().render();

                    var $transcriber = transcriptionBox.$el;
                    $("body").append($transcriber);
                     // Clear values and reset form desitantation
                     $(".observation-input").val(null);
                     $("[data-selectable='true'").val(null).trigger("change");
                     $forms = $("form.annotation-form");
                     _.each($forms, function(form){
                        $(form).attr("method", "post");
                        $(form).attr("action", "/annotations");
                     });


                     if ($transcriber.is(":hidden")) {
                        // show transcriber
                       $transcriber.show(250); /*open the box with a delay of half a second. This is what makes the transcription
                       box open with a flourish. Remove the value from the .show() function to make it open instantly */
                       $transcriber.offset({left: 25, top: 75}); //set position of the box to open at the click event 'e' position

                       var position = {
                          x: $transcriber.offset().left - $(document).scrollLeft() - $("#canvas").offset().left,
                          y : $transcriber.offset().top - $(document).scrollTop() - $("#canvas").offset().top
                       };
                    }
                }
            },

            onRender : function() {
                this.$el.find("#page-complete-checkbox").bootstrapSwitch({
                      size : "normal",
                      onText : "complete",
                      offText : "finish",
                      labelText : "transcribing",
                      onColor : "success",
                      offColor : "primary",
                      inverse : true,

                      onSwitchChange : function(event, state) {
                          if (state) {
                              $("#finish-transcribing-btn").removeClass("btn-default").addClass("btn-success").val("Submit Finished Transcription");
                          } else {
                              $("#finish-transcribing-btn").addClass("btn-default").removeClass("btn-success").val("Take a Break");
                          };
                      }
                });
            }
        });

        PageCanvas = Marionette.ItemView.extend({
            template : "#page-canvas-template",
            attributes : {
                id: "canvas"
            }
        });

        PageImage = Marionette.ItemView.extend({
            template : "#page-image-template",

            initialize : function(options) {
                options = options || {};
                defaults = {
                    cursor : "move",
                    x : true,
                    y : true,
                    stopFn : null,
                    scroll : true
                };
                this.options = $.extend(true, {}, this.options, defaults, options);

            },

            events : {
                "click .default-position-btn" : function() {
                    if (this.options.x && this.options.scrollLeft){
                        this.$el.kinetic("scrollLeft", this.options.scrollLeft);
                    };

                    if (this.options.y && this.options.scrollTop){
                        this.$el.kinetic("scrollTop", this.options.scrollTop);
                    };

                    if (this.$el.find(".adjust-position-btn.adjusting").length > 0) {
                        this.stopPositioning();
                    };
                },
                "click .adjust-position-btn" : "positionImage",
                "click .adjust-position-btn.adjusting" : "stopPositioning"
            },

            positionImage : function() {
                $btn = this.$el.find(".adjust-position-btn");
                $btn.html("Stop Repositioning").addClass("adjusting btn-primary").removeClass("btn-default");

                this.$el.find(".action-msg").addClass("visible");

                this.$el.kinetic("attach");
            },

            stopPositioning : function() {
                $btn = this.$el.find(".adjust-position-btn.adjusting");
                $btn.html("Reposition Image").removeClass("adjusting btn-primary").addClass("btn-default");

                this.$el.find(".action-msg").removeClass("visible");

                this.$el.kinetic("detach");
            },

            onRender : function(options) {
                if (this.options.attributes && this.options.attributes.id) {
                    this.$el.attr("id", this.options.attributes.id);
                };

                var self = this;
                this.$el.kinetic({
                    y : this.options.x,
                    y : this.options.y,
                    cursor : this.options.cursor,
                    "can scroll" : this.options.scroll,
                    stopped : function() {
                        // console.log(options);
                        if (options.options.stopFn) {
                            options.options.stopFn.call(this);
                        }
                    },
                    moved : function() {
                        // console.log(options);
                        if (options.options.moveFn) {
                            options.options.moveFn.call(this);
                        }
                    }
                });
                

                if (this.model.get("resizeContainer")) {
                    // console.info("resize");
                    containerHeight = $("#transcriber-container").height();
                    toolbarHeight = $("#transcriber-toolbar").height();
                    headerImgHeight = $("#header-image-container").height();

                    this.$el.height(containerHeight - (toolbarHeight + headerImgHeight));
                };

                if (this.options.postRenderFn) {
                    this.options.postRenderFn.call(this);
                };
            }
        });

        Page = Backbone.Model.extend({
            url : "/page_for_transcription/<%= transcription.id if transcription.present? %>",
            defaults : {
                image_id : "",
                resizeContainer : false,
                action_msg : "click and drag to reposition annotation guide"
            }

        });

        Annotation = Backbone.Model.extend({

        });

        AnnotationCollection = Backbone.Collection.extend({

        });

        AnnotationBoxView = Marionette.ItemView.extend({
            className : "annotation-marker",

            onRender : function() {
                if (this.model) {

                }
            }
        });

        AnnotationCollectionView = Marionette.CollectionView.extend({
            itemView : AnnotationBoxView
        });

        TranscriptionBox = Marionette.ItemView.extend({
            template : "#transcription-box-template",
            attributes : {
                id : "scribe_annotation_box"
            },

            events : {
                "click .close-btn" : function() {
                    this.destroy();
                },

                "click .scribe_tab" : function(e){

                 /* perform function when user click on an element with the "scribe_tab" class. Corresponds
                  to Field Group tabs in the transcription box */
                  //function to toggle between field group form layers when you click on their respective tab. Marks current tab as active


                    self = this;
                     $tab = $(e.target);
                     self.$el.find(".annotation-form-field-group").hide(); //hide all other instances of the field_group data forms when switching tabs
                     self.$el.find('#formInstructions').hide();
                     $tab.addClass("active"); //mark clicked tab as active by settings its class

                     $tab.siblings().removeClass('active'); //set all siblings of the clicked tab as unselected

                     var $currentForm = self.$el.find("#field-group-" + $tab.data('field-group-id'));


                     $currentForm.show();

                     newWidth = ($tab.data("field-count") * 110) + 100;

                     self.$el.width(newWidth);

                     self.$el.find("#transcriber-grid-container").css("display", "table");

                  }
                //end field toggler
            },

            defaultFieldOptions : [
                { id: "empty", text: "Empty/Blank"},
                { id: "illegible", text: "Illegible"},
                { id: "retracted", text: "Retracted / Line through"}
            ],

            formatSelection : function (data, container) {
                // console.log(data);
                var res = "<span>";
                var $element = $(data.element);

                var displayAttribute = data.display_attribute;
                if (typeof(displayAttribute) == "undefined" && !(typeof($element.data("display-attribute")) == "undefined") ) {
                    displayAttribute = $element.data("display-attribute");
                    // console.info(displayAttribute);
                    // console.info("data undefined");
                };
                var iconUrl = data.icon_url;
                if (typeof(iconUrl == "undefined") && !(typeof($element.data("icon-url")) == "undefined") ) {
                    iconUrl = $element.data("icon-url");
                    // console.info("data undefined");
                };
                var textSymbol = data.text_symbol;
                if (typeof(textSymbol) == "undefined" && !(typeof($element.data("text-symbol")) == "undefined") ) {
                    textSymbol = $element.data("text-symbol");
                    // console.info("data undefined");
                };
                var name = data.text;
                if ((typeof(name) == "undefined" || name == "undefined") && !(typeof($element.data("name")) == "undefined") ) {
                    name = $element.data("name");
                    // console.info("data undefined");
                };

                if (displayAttribute) {
                    if (displayAttribute == "icon") {
                        res += ("<img src='" + iconUrl + "' />");
                        // console.info("icon");
                    } else if (displayAttribute == "symbol") {
                        res += textSymbol;
                        // console.info("symbol");
                    } else {
                        res += name;
                        // console.info("name");
                    }
                } else {
                    res += data.text;
                    // console.info("text");
                };

                res += "</span>";

                return $(res);
            },

            initializeFields : function() {
                self = this;
                // Set up plugins for input fields

                // Date Fields
                this.$el.find(".date-field").select2({
                    placeholder : "Select Date",
                    theme : "bootstrap"
                });

                // Time Fields
                _.each(this.$el.find('.time-group'), function(time) {
                    $(time).datetimepicker({
                        format: 'LT',
                        widgetParent : $(time).parents(".scribe_input_field"),
                        widgetPositioning : {
                          vertical : "top"
                        }
                    });
                });

                // Selectable Fields
                _.each(this.$el.find(".observation-input.selectable"), function(field) {
                    $field = $(field);

                    if ($field.data("field-options")) {

                        $field.select2({
                            forceAbove : true,
                            theme : "bootstrap",
                            createTag: function(params) {
                                return undefined;
                            },
                            tokenSeparators: [',', ' '],
                            placeholder: 'select',
                            current : function(element,callback) {
                                // console.log("select2 initialized for " + $field.data("field-id"));
                                $.ajax({
                                    url : "/field_options_for_field/" + $field.data("field-id"),
                                    dataType : "json",
                                    success : function(data, status) {
                                        var opts = [];
                                        // console.info("current");
                                        // console.log(data);

                                        _.each(data, function(option, key, list) {
                                            console.warning(option);
                                            opts.push({
                                                id : option.id,
                                                text : option.name,
                                                title : option.name,
                                                icon_url: option.icon_url,
                                                text_symbol: option.text_symbol,
                                                display_attribute: option.display_attribute
                                            });
                                        });
                                        opts = opts.concat(self.defaultFieldOptions);
                                        callback(opts);
                                    },
                                    error : function(response) {
                                        console.log("failed to get options for " + $field.data("field-id"));
                                    }
                                });
                            },

                            templateResult : function(obj, container) {
                                // console.info("template result");
                                // console.log(obj);
                                result = "<span>";
                                if (obj.icon_url && obj.icon_url.length > 0){
                                    result += ("<img src='" + obj.icon_url + "' />" + "&nbsp;");
                                };
                                if (obj.text_symbol && obj.text_symbol.length > 0){
                                    result += (obj.text_symbol + "&nbsp;-&nbsp;");
                                };
                                result += (obj.text + "</span>");

                                return $(result);
                            },

                            templateSelection : self.formatSelection,

                            ajax : {
                                url : "/field_options_for_field/" + $field.data("field-id"),
                                dataType : "json",
                                data : function(params) {
                                    return { search : params.term };
                                },
                                processResults : function(_data, params) {
                                    res = [];
                                    // console.info("ajax");
                                    // console.log(_data);
                                    _.each(_data, function(option) {
                                        opt = $.extend({}, {
                                                id : option.id,
                                                text : option.name,
                                                title : option.name,
                                                icon_url: option.icon_url,
                                                text_symbol: option.text_symbol,
                                                display_attribute: option.display_attribute
                                            });

                                        res.push(opt);
                                    });
                                    res = res.concat(self.defaultFieldOptions);
                                    var data = {
                                        results: res
                                    };
                                    return data;
                                },
                                    error : function(response) {
                                        console.log("failed to get search options for " + $field.data("field-id"));
                                    }
                            }
                        }).on("select2:select", function() {
                            optionIds = [];
                            $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                            $(this).find("option:selected").each(function() {
                                optionIds.push($(this).val());
                            });

                            $optionIdsInput.val(optionIds);

                        }).on("select2:unselect", function(e) {
                            console.log(e);
                            optionIds = [];
                            $optionIdsInput = $(this).parent().siblings(".selected-option-ids");

                            $(this).find("option:selected").each(function() {
                                optionIds.push($(this).val());
                            });

                            $optionIdsInput.val(optionIds);

                        });

                    } else {
                        $field.select2({
                            theme : "bootstrap",
                            multiple: false,
                            tags: true,
                            tokenSeparators: [',', ' '],
                            placeholder: 'type',
                            data : self.defaultFieldOptions,
                            createSearchChoice:function(term, data) {
                              if ( $(data).filter( function() {
                                return this.text.toLowerCase() === term.toLowerCase(); //even if the this.text is undefined it works
                              }).length===0) {
                                return {id:term, text:term};
                              };
                            },
                            selectOnClose : true
                        });
                    };
                });


            },

            onRender : function() {
                this.$el.draggable({
                    scroll: false,
                    drag: function(){
                    }
                });

                this.initializeFields();

                this.$el.find('[data-toggle="popover"]').popover();
                this.$el.find('[data-toggle="tooltip"]').tooltip();


            }
        });


        mainLayout = new MainLayout();

        mainPage = new Page().set("image_id", "target-image").set("resizeContainer", true);
        headerPage = new Page().set("action_msg", "click and drag this image vertically until table header is visible");
        timePage = new Page().set({
            "image_id" : "time-image",
            "resizeContainer" : true,
            "action_msg" : "click and drag this image horizontally until time column is visible"
        });
        pageCanvas = new PageImage({
            model : mainPage,
            template : "#page-canvas-template",
            attributes : {
                id : "canvas"
            },
            moveFn : function() {
                timeImg.$el.kinetic("scrollTop", this.settings.scrollTop);
                headerImg.$el.kinetic("scrollLeft", this.settings.scrollLeft);
            },
            postRenderFn : function() {
                var $canvas = this.$el;
                // $canvas.width($("#target-image").width());
                // $canvas.height($("#target-image").height());
                // console.log("annotation boxes");
                if (<%= @transcription.annotations.any? ? true : false %>) {
                  <% @transcription.annotations.each do |annotation| %>
                    <% if annotation.x_tl.present? && annotation.y_tl.present? && annotation.width.present? && annotation.height.present? %>
                      var box = $("<div><div>").css({
                        "left": <%= annotation.x_tl %>,
                        "top": <%= annotation.y_tl %>,
                        "width": <%= annotation.width %>,
                        "height": <%= annotation.height %>
                      }).attr("id", "<%= 'annotation' + annotation.id.to_s %>").attr('data-annotation-id', <%= annotation.id %>).attr('data-field-group-id', <%= annotation.field_group.id %>).addClass("annotation-marker").addClass("<%= annotation.field_group.colour_class %>");
                      box.html(annotationBoxContents(<%= annotation.id %>));

                      $canvas.append(box);

                      // console.log("<%= annotation.date_time_id %>");
                    <% end %>
                  <% end %>
                } else {
                  console.log("no annotations");
                };
            }
        });
        headerImg = new PageImage({
            model : headerPage,
            cursor : "ns-resize",
            x : false,
            attributes : {
                id : "header-image-kinetic"
            },
            postRenderFn : function() {
                this.$el.kinetic("detach");
            },
            scrollTop : 390
        });
        timeImg = new PageImage({
            model : timePage,
            cursor : "ew-resize",
            y : false,
            attributes : {
                id : "time-image-kinetic"
            },
            postRenderFn : function() {
                this.$el.kinetic("detach");
            },
            scrollLeft : 315
        });

        return {
            init : function() {
                toolbarLayout = new ToolbarLayout();
               

                TranscriberApp.main.show(mainLayout);

                mainLayout.toolbar.show(toolbarLayout);
                mainLayout.headerImg.show(headerImg);
                mainLayout.timeImg.show(timeImg);
                mainLayout.pageContainer.show(pageCanvas);

                headerImg.$el.kinetic("scrollTop", 390);
                timeImg.$el.kinetic("scrollLeft", 315);

                pageCanvas.$el.on("scroll", function() {
                    timeImg.$el.kinetic("scrollTop", $(this).scrollTop());
                    headerImg.$el.kinetic("scrollLeft", $(this).scrollLeft());
                });
            },
            MainLayout : mainLayout
        };
    })(Backbone, Marionette)

    $(document).ready(function() {
        TranscriberApp.addInitializer(TranscriberApp.AppManager.init);
        TranscriberApp.start();
    });

</script>
