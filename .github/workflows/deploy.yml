---
name: "Build Draw Docker image for Deploy"

# TOOD: we want to build on a release with the tag done appropriately
# How to pull latest release and get it's tag from repo

on:
  push:
    branches:
      - production
      - staging
      - development
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  release:
    runs-on: ubuntu-20.04
    # Temp keys for building assets and tests
    env:
      DEVISE_SECRET: aa77bb734faa9b935c1f8b68846e37aed9096cc9fb746copypastaf856594409a11b1086535e468edb2e5bbc18482b386b6264ada38703dcdefd94a291ab5a95eb5
      SECRET_KEY_BASE: aa77bb734faa9b935c1f8b68846e37aed9096cc9fb746copypastaf856594409a11b1086535e468edb2e5bbc18482b386b6264ada38703dcdefd94a291ab5a95eb5
      SECRET_TOKEN: aa77bb734faa9b935c1f8b68846e37aed9096cc9fb746copypastaf856594409a11b1086535e468edb2e5bbc18482b386b6264ada38703dcdefd94a291ab5a95eb5

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 4096
          temp-reserve-mb: 4096
          root-reserve-mb: 16384
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Build Space
        run: |
          echo "Free space:"
          df -h

      - uses: actions/checkout@v2

      # - name: Extract branch name
      #   shell: bash
      #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
      #   id: extract_name

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # ${{ env.REGISTRY }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          # name/app:production === ${{ steps.meta.outputs.tags }}
          # The images name needs to be changed ... climate-data-rescue
          images: climate-data-rescue
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      # images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Define the repository labels
      #   run: |
      #     echo "CONTAINER_TEST_REPOSITORY=ghcr.io/balen/climate-data-rescue:ci-${{ github.sha }}" >> $GITHUB_ENV
      #     echo "CONTAINER_DEPLOY_REPOSITORY=ghcr.io/balen/climate-data-rescue:${{ steps.extract_name.outputs.branch }}" >> $GITHUB_ENV
      # TODO -----------
      #  for pull OWNER
      # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile-prod
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            DEVISE_SECRET=${{ env.DEVISE_SECRET }}
            SECRET_KEY_BASE=${{ env.SECRET_KEY_BASE }}
            SECRET_TOKEN=${{ env.SECRET_TOKEN }}
            RAILS_ENV=production
            NODE_ENV=development
          push: false
          load: true
          # TODO: TAG ...
          tags: "${{ steps.meta.outputs.tags }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # name/app:production === ${{ steps.meta.outputs.tags }}
      - name: Run specs
        run: |
          docker run -d --name="test-database" --hostname "mysql" -e "MYSQL_PASSWORD=test" -e "MYSQL_USER=test" -e "MYSQL_ROOT_PASSWORD=test" -p 127.0.0.1:3306:3306/tcp mysql:5.7
          docker run --network "container:test-database" -e RAILS_ENV=test -e DEVISE_SECRET=${{ env.DEVISE_SECRET }} -e SECRET_KEY_BASE=${{ env.SECRET_KEY_BASE }} -e SECRET_TOKEN=${{ env.SECRET_TOKEN }} -e "MYSQL_PASSWORD=test" -e "MYSQL_USER=root" -e "BASE_URL=localhost:3000" ${{ steps.meta.outputs.tags }} /bin/sh -c "bundle exec rake db:create db:setup; bundle exec rake db:seed; bundle exec rspec"

      #
      - name: Run security tests
        if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/security-') }}
        run: |
          docker run -e RAILS_ENV=test ${{ steps.meta.outputs.tags }} bundle update brakeman --quiet
          docker run -e RAILS_ENV=test ${{ steps.meta.outputs.tags }} bundle exec brakeman --run-all-checks --no-pager
          # docker run -e RAILS_ENV=test ${{ steps.meta.outputs.tags }} bundle exec bundler-audit check --update
          # docker run -e RAILS_ENV=test ${{ steps.meta.outputs.tags }} bundle exec ruby-audit check
          docker run -e RAILS_ENV=production -e NODE_ENV=production ${{ steps.meta.outputs.tags }} /bin/sh -c "bin/yarn install --frozen-lockfile; yarn check --integrity"

      #
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      - name: Publish the deployable image
        # ${{ github.repository_owner }}
        run: |
          docker push "ghcr.io/${{ github.repository_owner }}/${{ steps.meta.outputs.tags }}"
      # docker tag ${{ steps.meta.outputs.tags }} climate-data-rescue:${{ steps.extract_name.outputs.branch }}

      # Needed to prevent cache from growing forever (see https://github.com/docker/build-push-action/issues/252)
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
